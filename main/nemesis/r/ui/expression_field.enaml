from __future__ import absolute_import
from enaml.layout.api import hbox, vbox, spacer
from enaml.widgets.api import Container, HGroup, Label, PushButton
from nemesis.app.common.resources import get_enaml_icon
from nemesis.ui.drop_field import DropField
from nemesis.ui.flat_button import FlatButton
from nemesis.ui.palette_popup import PalettePopup
from nemesis.r.ui.validators import RExpressionValidator


enamldef RExpressionField(HGroup):
    """ A widget for editing numerical and boolean expressions.
    Consists of a text field plus a palette of available operators.
    """
    attr text: str = ''
    align_widths = False
    padding = 0
    spacing = 5
    DropField: field:
        placeholder = 'Enter expression...'
        text := parent.text
        validator = RExpressionValidator()
    FlatButton:
        icon = get_enaml_icon('arithmetic', size=(16, 16))
        clicked :: RExpressionPalettePopup(self, field=field).show()


enamldef RExpressionPalettePopup(PalettePopup):
    Container:
        constraints = [
            vbox(
                hbox(spacer, pb_plus, pb_minus, pb_mult, pb_div, pb_pow, ),
                hbox(spacer, pb_eq, pb_neq, pb_geq, pb_leq, pb_gt, pb_lt, spacer),
                hbox(spacer, pb_if_else, pb_and, pb_or, pb_not, spacer),
            ),
            # Horizontally center each row.
            # FIXME: Is there a cleaner way, esp. for rows with an even number 
            # of items?
            pb_mult.h_center == contents_h_center,
            pb_eq.left - contents_left == contents_right - pb_lt.right,
            pb_if_else.left - contents_left == contents_right - pb_not.right,
        ]
        PushButton: pb_plus:
            text = u'\N{PLUS SIGN}'
            clicked :: field.insert_text('+')   
        PushButton: pb_minus:
            text = u'\N{MINUS SIGN}'
            clicked :: field.insert_text('-')
        PushButton: pb_mult:
            text = u'\N{MULTIPLICATION SIGN}'
            clicked :: field.insert_text('*')
        PushButton: pb_div:
            text = u'\N{DIVISION SIGN}'
            clicked :: field.insert_text('/')
        PushButton: pb_pow:
            # XXX: Doesn't display properly.
            #text = u'x\N{MODIFIER LETTER SMALL Y}'
            text = u'^'
            clicked :: field.insert_text('^')
        PushButton: pb_eq:
            text = u'\N{EQUALS SIGN}'
            clicked :: field.insert_text('==')
        PushButton: pb_neq:
            text = u'\N{NOT EQUAL TO}'
            clicked :: field.insert_text('!=')
        PushButton: pb_geq:
            text = u'\N{GREATER-THAN OR EQUAL TO}'
            clicked :: field.insert_text('>=')
        PushButton: pb_leq:
            text = u'\N{LESS-THAN OR EQUAL TO}'
            clicked :: field.insert_text('<=')
        PushButton: pb_gt:
            text = u'\N{GREATER-THAN SIGN}'
            clicked :: field.insert_text('>')
        PushButton: pb_lt:
            text = u'\N{LESS-THAN SIGN}'
            clicked :: field.insert_text('<')
        PushButton: pb_if_else:
            text = u'if-else'
            clicked :: field.insert_text('ifelse(CONDITION, YES, NO)')
        PushButton: pb_and:
            text = u'and'
            clicked :: field.insert_text('&')
        PushButton: pb_or:
            text = u'or'
            clicked :: field.insert_text('|')
        PushButton: pb_not:
            text = u'not'
            clicked :: field.insert_text('!')