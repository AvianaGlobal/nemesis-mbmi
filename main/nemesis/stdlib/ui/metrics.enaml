from __future__ import absolute_import
from enaml.core.api import Conditional
from enaml.layout.api import hbox
from enaml.widgets.api import Container, Form, GroupBox, CheckBox, Label, ObjectCombo
from nemesis.app.builder.model_views import BaseMetricView, BaseControlMetricView
from nemesis.r.ui.expression_field import RExpressionField
from nemesis.r.ui.float_field import RFloatField
from nemesis.r.ui.validators import RNameValidator
from nemesis.ui.field import Field


enamldef ValueMetricView(BaseControlMetricView):
    Label:
        text = 'Value'
    RExpressionField:
        text := obj.expression


enamldef EntropyMetricView(BaseControlMetricView):
    Label:
        text = 'Entropy'
    RExpressionField:
        text := obj.expression


enamldef RatioMetricView(BaseControlMetricView):
    Label:
        text = 'Numerator'
    RExpressionField:
        text := obj.numerator
    Label:
        text = 'Denominator'
    RExpressionField:
        text := obj.denominator
    GroupBox:
        title = 'Advanced settings'
        Form:
            padding = 0
            CheckBox:
                text = 'Cap below'
                checked := obj.cap_below
            Container:
                constraints = [
                    hbox(below_field1, below_label, below_field2),
                    below_field1.width == below_field2.width,
                    below_field1.v_center == below_label.v_center,
                ]
                enabled << obj.cap_below
                padding = 0
                
                RFloatField: below_field1:
                    resist_width = 'ignore'
                    value := obj.cap_below_at
                Label: below_label:
                    text = 'replacing with'
                RFloatField: below_field2:
                    resist_width = 'ignore'
                    value := obj.cap_below_with
            CheckBox:
                text = 'Cap above'
                checked := obj.cap_above
            Container:
                constraints = [
                    hbox(above_field1, above_label, above_field2),
                    above_field1.width == above_field2.width,
                    above_field1.v_center == above_label.v_center,
                ]
                enabled << obj.cap_above
                padding = 0
                RFloatField: above_field1:
                    resist_width = 'ignore'
                    value := obj.cap_above_at
                Label: above_label:
                    text = 'replacing with'
                RFloatField: above_field2:
                    resist_width = 'ignore'
                    value := obj.cap_above_with
            CheckBox:
                text = 'Replace zero with'
                checked := obj.replace_zero
            RFloatField:
                value := obj.replace_zero_with
                enabled << obj.replace_zero
            CheckBox:
                text = 'Replace infinity with'
                checked := obj.replace_inf
            RFloatField:
                value := obj.replace_inf_with
                enabled << obj.replace_inf
            CheckBox:
                text = 'Replace missing with'
                checked := obj.replace_na
            RFloatField:
                value := obj.replace_na_with
                enabled << obj.replace_na
            CheckBox:
                text = 'Apply logarithm transform to ratio'
                checked := obj.log_transform


enamldef DistributionMetricView(BaseMetricView):
    Label:
        text = 'Source value'
    RExpressionField:
        text := obj.expression
    Label:
        text = 'Statistic'
    ObjectCombo:
        items = ['chi_square', 'ks', 'custom' ]
        selected := obj.kind
        to_string = lambda item: {\
                'chi_square': 'Chi-squared',
                'ks': 'Kolmogorov-Smirnov',
                'custom': 'Custom statistic...',
            }[item]
    Conditional:
        condition << obj.kind == 'custom'
        Label:
            text = 'Statistic function'
        Field:
            text := obj.custom_function
            validator << RNameValidator()


enamldef UniqueDiscreteMetricView(BaseMetricView):
    Label:
        text = 'Source value'
    RExpressionField:
        text := obj.expression
    Label:
        text = 'Method'
    ObjectCombo:
        items = ['distinct', 'frequent']
        to_string = lambda item: {\
            'distinct': 'Unique_Distinct_Values%',
            'frequent': 'Unique_Most_Frequent%'
        }[item]
        selected := obj.method


enamldef UniqueContinuousMetricView(BaseMetricView):
    Label:
        text = 'Source value'
    RExpressionField:
        text := obj.expression


enamldef GraphDensityMetricView(BaseMetricView):
    Label:
        text = 'Source value'
    RExpressionField:
        text := obj.expression