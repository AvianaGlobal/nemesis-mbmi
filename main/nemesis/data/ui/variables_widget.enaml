from __future__ import absolute_import

from enaml.core.api import Conditional, Include
from enaml.widgets.api import Container, Form, Splitter, SplitItem, Label
from traits.api import Instance, List
from traitsui.api import View, Item, Handler, TabularEditor
from traitsui.tabular_adapter import TabularAdapter
from traits_enaml.widgets.traits_view import TraitsView

from ..variable import Variable


enamldef VariablesWidget(Splitter): widget:
    
    # List of Variables to display.
    attr variables : list
    
    # Whether to use a "compound" drag object. If True, the drag data is the
    # Variable object. If False, it is the name of the variable only.
    attr compound_drag : bool = False
    
    # Whether to show an information panel for the selected variable.
    attr show_info_panel : bool = False
    
    attr controller = VariablesController(widget = widget,
                                          variables = variables)
    variables >> controller.variables
    
    orientation = 'vertical'
    
    SplitItem:
        Container:
            padding = 0
    
            TraitsView:
                model = controller
                view = View(Item('variables',
                                 editor = TabularEditor(
                                     adapter = VariablesAdapter(),
                                     editable = False,
                                     multi_select = True,
                                     selected = 'selected',
                                     show_titles = False,
                                     horizontal_lines = False,
                                     vertical_lines = False),
                                show_label = False),
                            handler = controller,
                            width = 100, # Minimum width
                            resizable = True)
                hug_height = 'ignore'
    
    Conditional:
        condition << bool(controller.selected) and show_info_panel
        
        SplitItem:
            Form:
                padding = 0
                row_spacing = 0
                
                Label:
                    text = 'Name'
                Label:
                    text << controller.selected[0].name
                Label:
                    text = 'Type'
                Label:
                    text << trait_type_to_str(controller.selected[0].type)
                Include:
                    objects << statistics_form(controller.selected[0])


class VariablesAdapter(TabularAdapter):
    
    columns = [ ('Name', 'name'), ]
    
    def get_drag(self, obj, trait, row):
        var = self.get_item(obj, trait, row)
        return var if obj.widget.compound_drag else var.name


class VariablesController(Handler):
    
    widget = Instance(VariablesWidget)
    variables = List(Variable)
    
    selected = List(Variable)


def statistics_form(var):
    if var.is_numerical:
        keys = [ 'mean', 'std', ]
    else:
        keys = [ 'unique', 'top', ]
    labels = {
        'std': 'Std. Dev.',
        'top': 'Mode',
    }
    
    widgets = []
    for key in keys:
        if key in var.statistics:
            label = labels.get(key, key.capitalize())
            stat = var.statistics[key]
            if isinstance(stat, float):
                stat_str = '{:.6g}'.format(stat)
            else:
                stat_str = str(stat)
            widgets.extend([
                Label(text = label),
                Label(text = stat_str),
            ])
    return widgets


def trait_type_to_str(t):
    from traits.api import BaseBool, BaseInt, BaseFloat, BaseStr, BaseUnicode
    
    if issubclass(t, BaseBool):
        return 'boolean'
    elif issubclass(t, BaseInt):
        return 'integer'
    elif issubclass(t, BaseFloat):
        return 'floating'
    elif issubclass(t, (BaseStr, BaseUnicode)):
        return 'string'
    else:
        return 'unknown'