from __future__ import absolute_import

import os

from enaml.core.api import Looper, Conditional
from enaml.layout.api import vbox, hbox, align, spacer
from enaml.widgets.api import MainWindow, Container, DockArea, DockItem, \
    MenuBar, Menu, Action, ToolButton, ScrollArea, StatusBar, StatusItem, \
    Label, ObjectCombo
from nemesis.data.variable import Variable
from nemesis.data.ui.data_explorer_widget import DataExplorerWidget
from nemesis.data.ui.data_frame_table_model import DataFrameTableModel
from nemesis.data.ui.variables_widget import VariablesWidget
from nemesis.ui.toolbar import ToolBar
from enaml.styling import StyleSheet, Style, Setter
from nemesis.app.common.about_dialog import show_about_dialog
from nemesis.app.common.app_window import ApplicationWindow
from nemesis.app.common.resources import get_toolbar_icon
from nemesis.app.inspector.preferences_dialog import PreferencesDialog


enamldef MainDockArea(DockArea):
    DockItem:
        name = 'result_variables'
        title = 'Result Variables'
        closable = False
        stretch = 0
        Container:
            VariablesWidget:
                variables << main_controller.result_variables
                compound_drag = True
                show_info_panel = True
    DockItem:
        name = 'input_variables'
        title = 'Input Variables'
        closable = False
        stretch = 0
        Container:
            VariablesWidget:
                variables << main_controller.results.input_vars
                compound_drag = True
                show_info_panel = True
    DockItem:
        name = 'result_table'
        title = 'Results'
        closable = False
        Container:
            DataExplorerWidget:
                name = 'result_explorer'
                model << main_controller.results_model
                selected := main_controller.selected_groups
                selection_drag = True
                selection_mode = 'row'
                multiselect = True
                dirtied :: main_controller._dirtied()
                decoration => (r, c, v):
                    return main_controller.result_data_decoration(r, c, v)
    DockItem:
        name = 'input_table'
        title = 'Input Data'
        closable = False
        Container:
            constraints << [
                vbox(
                    hbox(*(cond.items + [spacer])),
                    input_explorer
                ),
                align('v_center', *cond.items)
            ] if main_controller.groups_are_entities else []
            Conditional: cond:
                condition << main_controller.groups_are_entities
                Label:
                    text = 'Link:'
                ObjectCombo:
                    items << (
                        [main_controller.results.entity_name] +
                        map(str, main_controller.input_data.columns)
                    )
                    selected := main_controller.link_column
            DataExplorerWidget: input_explorer:
                name = 'input_explorer'
                model << DataFrameTableModel(main_controller.input_data)
                dirtied :: main_controller._dirtied()


enamldef Main(ApplicationWindow): window:
    name = 'inspector'
    title << 'Results Inspector - ' + main_controller.file_title
    initial_size = (1024, 700)
    closing :: main_controller.confirm_window_close(change['value'])
    StyleSheet:
    # Font
        Style:
            Setter:
                field = 'font-family'
                value = 'Arial'
    # Light purple
        Style:
            element = 'ApplicationWindow'
            Setter:
                field = 'background'
                value = '#efedf5'
    # Dark purple
        Style:
            element = 'Main'
            Setter:
                field = 'background'
                value = '#673AB7'
    Container:
        padding = 0
        MainDockArea:
            name = 'dock_area'
            style = 'grey-wind'
    MenuBar:
        Menu:
            title = '&File'
            Action:
                text = 'New session...\tCtrl+N'
                triggered :: main_controller.new_file()
            Action:
                text = 'Open session...\tCtrl+O'
                triggered :: main_controller.open_file()
            Menu:
                title = 'Open Recent Session'
                Looper:
                    iterable << main_controller.recent_files
                    Action:
                        text = os.path.basename(loop_item)
                        tool_tip = loop_item
                        triggered :: main_controller.load_file(loop_item)
            Action:
                text = 'Save Session\tCtrl+S'
                enabled << main_controller.file_dirty
                triggered :: main_controller.save_file()
            Action:
                text = 'Save Session As...'
                triggered :: main_controller.save_file_as()
            Action:
                separator = True
            Action:
                text = 'Close\tCtrl+W'
                triggered :: window.close()
        Menu:
            title = '&Edit'
            Action:
                text = 'Preferences\tCtrl+P'
                triggered ::
                    PreferencesDialog().show()
        Menu:
            title = '&View'
            Action:
                text = 'Show Anomaly Indicators'
                checkable = True
                checked := main_controller.dashboard_mode
            Action:
                separator = True
            Action:
                text = 'Reset Layout'
                triggered :: main_controller.reset_layout()
        Menu:
            title = '&Help'
            Action:
                text = 'About'
                triggered :: show_about_dialog(parent=window)
    ToolBar:
        title = 'File'
        ToolButton:
            text = 'New session'
            tool_tip = 'Create new session'
            icon = get_toolbar_icon('document')
            clicked :: main_controller.new_file()
        ToolButton:
            text = 'Open session'
            tool_tip = 'Open an existing session'
            icon = get_toolbar_icon('open')
            clicked :: main_controller.open_file()
        ToolButton:
            text = 'Save session'
            tool_tip = 'Save session to disk'
            icon = get_toolbar_icon('save')
            enabled << main_controller.file_dirty
            clicked :: main_controller.save_file()
    ToolBar:
        title = 'View'
        ToolButton:
            text = 'Anomaly indicators'
            tool_tip = 'Show anomaly indicators'
            icon = get_toolbar_icon('status_all')
            checkable = True
            checked := main_controller.dashboard_mode
    ToolBar:
        title = 'Plots'
        ToolButton:
            text = 'Scatter Plot'
            tool_tip = 'Scatter plot'
            icon = get_toolbar_icon('plot_scatter')
            clicked :: main_controller.show_plot('scatter')
        ToolButton:
            text = 'Bar Plots'
            tool_tip = 'Bar-type plots'
            icon = get_toolbar_icon('plot_bar')
            popup_mode = 'instant'
            Menu:
                Action:
                    text = 'Bar plot'
                    tool_tip = 'Bar plot (for discrete variables)'
                    triggered :: main_controller.show_plot('bar')
                Action:
                    text = 'Histogram'
                    tool_tip = 'Histogram (for continuous variables)'
                    triggered :: main_controller.show_plot('histogram')
        ToolButton:
            text = 'Box Plot'
            tool_tip = 'Box plot'
            icon = get_toolbar_icon('plot_box')
            clicked :: main_controller.show_plot('box')
    StatusBar:
        size_grip_enabled = True
        StatusItem:
            Label:
                text << main_controller.selection_status_text