// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// chisq_test
NumericVector chisq_test(SEXP values, SEXP groups);
RcppExport SEXP _NemesisOutliers_chisq_test(SEXP valuesSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(chisq_test(values, groups));
    return rcpp_result_gen;
END_RCPP
}
// entropy_disc
NumericVector entropy_disc(SEXP values, SEXP groups, std::string type);
RcppExport SEXP _NemesisOutliers_entropy_disc(SEXP valuesSEXP, SEXP groupsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(entropy_disc(values, groups, type));
    return rcpp_result_gen;
END_RCPP
}
// graph_density
NumericVector graph_density(SEXP values, SEXP groups);
RcppExport SEXP _NemesisOutliers_graph_density(SEXP valuesSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_density(values, groups));
    return rcpp_result_gen;
END_RCPP
}
// uniq_cont
NumericVector uniq_cont(SEXP values, SEXP groups);
RcppExport SEXP _NemesisOutliers_uniq_cont(SEXP valuesSEXP, SEXP groupsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type groups(groupsSEXP);
    rcpp_result_gen = Rcpp::wrap(uniq_cont(values, groups));
    return rcpp_result_gen;
END_RCPP
}
// uniq_disc
NumericVector uniq_disc(SEXP values, SEXP groups, std::string type);
RcppExport SEXP _NemesisOutliers_uniq_disc(SEXP valuesSEXP, SEXP groupsSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type values(valuesSEXP);
    Rcpp::traits::input_parameter< SEXP >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(uniq_disc(values, groups, type));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_NemesisOutliers_chisq_test", (DL_FUNC) &_NemesisOutliers_chisq_test, 2},
    {"_NemesisOutliers_entropy_disc", (DL_FUNC) &_NemesisOutliers_entropy_disc, 3},
    {"_NemesisOutliers_graph_density", (DL_FUNC) &_NemesisOutliers_graph_density, 2},
    {"_NemesisOutliers_uniq_cont", (DL_FUNC) &_NemesisOutliers_uniq_cont, 2},
    {"_NemesisOutliers_uniq_disc", (DL_FUNC) &_NemesisOutliers_uniq_disc, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_NemesisOutliers(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
