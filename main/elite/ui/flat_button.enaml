import sys
from enaml.core.api import Conditional
from enaml.qt import QtGui
from enaml.styling import StyleSheet, Style, Setter
from enaml.widgets.api import PushButton
from .toolbar import ToolBar


enamldef FlatButton(PushButton): button:
    """ A button with a more 'flat' appearance.
    These blend in better in UI panels than traditional push buttons.
    """
    # XXX: Work around Retina display icon size issues on OS X.
    constraints = [ button.width == 24, button.height == 24] \
        if sys.platform == 'darwin' else []
    StyleSheet:
        Style:
            element = 'FlatButton'
            Setter:
                field = 'background'
                value = 'transparent'
        Conditional:
            condition = sys.platform == 'win32'
            Style:
                element = 'FlatButton'
                pseudo_class = 'hover'
                Setter:
                    field = 'background'
                    value = 'rgba(0,0,0,50)'
                Setter:
                    field = 'border-radius'
                    value = '5px'


class _FlatToolBar(ToolBar):
    """ An implementation detail of ``FlatToolBar``.
    """
    # ToolkitObject interface
    def activate_proxy(self):
        super(_FlatToolBar, self).activate_proxy()
        widget = self.proxy.widget
        # The background cannot be changed with the default OS X style.
        # See here: http://stackoverflow.com/questions/21363350
        if sys.platform == 'darwin':
            widget.setStyle(QtGui.QStyleFactory.create('cleanlooks'))


enamldef FlatToolBar(_FlatToolBar):
    """ A tool bar with a more 'flat' appearance.
    These are suitable for UI panels, not the main application toolbar.
    """
    StyleSheet:
        Style:
            element = 'ToolBar'
            Setter:
                field = 'background'
                value = 'transparent'